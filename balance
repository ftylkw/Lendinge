// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleLending {
    address public owner;
    mapping(address => uint256) public balances;
    mapping(address => uint256) public loanDueDates;
    uint256 public interestRate;

    event LoanIssued(address borrower, uint256 amount, uint256 dueDate);
    event LoanRepaid(address borrower, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    constructor(uint256 _interestRate) {
        owner = msg.sender;
        interestRate = _interestRate;
    }

    function borrow(uint256 amount, uint256 durationDays) external payable {
        require(amount > 0, "Borrow amount must be greater than 0");
        require(balances[msg.sender] == 0, "You have an existing loan");

        uint256 totalAmount = amount + calculateInterest(amount, durationDays);

        // Transfer total amount to borrower
        require(msg.value >= totalAmount, "Insufficient ether sent");
        payable(owner).transfer(msg.value); // Transfer excess ether back to the owner

        // Update balances and loan details
        balances[msg.sender] = totalAmount;
        loanDueDates[msg.sender] = block.timestamp + (durationDays * 1 days);

        emit LoanIssued(msg.sender, totalAmount, loanDueDates[msg.sender]);
    }

    function repay() external payable {
        require(balances[msg.sender] > 0, "No existing loan");
        require(msg.value == balances[msg.sender], "Incorrect repayment amount");

        // Transfer repaid amount to owner
        payable(owner).transfer(msg.value);

        // Clear borrower's balances and loan details
        balances[msg.sender] = 0;
        loanDueDates[msg.sender] = 0;

        emit LoanRepaid(msg.sender, msg.value);
    }

    function calculateInterest(uint256 amount, uint256 durationDays) internal view returns (uint256) {
        // Simple interest calculation based on the annual interest rate
        return (amount * interestRate * durationDays) / (365 * 100);
    }

    function setInterestRate(uint256 newInterestRate) external onlyOwner {
        require(newInterestRate > 0, "Interest rate must be greater than 0");
        interestRate = newInterestRate;
    }

    function getLoanDetails(address borrower) external view returns (uint256, uint256) {
        return (balances[borrower], loanDueDates[borrower]);
    }

    function getContractBalance() external view returns (uint256) {
        return address(this).balance;
    }
}
